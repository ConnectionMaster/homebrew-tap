#!/usr/bin/env python3
"""
Update ggshield Homebrew formula
"""
import argparse
import json
import hashlib
import logging
import re
import shutil
import sys
import time

from pathlib import Path
from subprocess import run
from urllib import request

MAX_RETRIES = 5
RETRY_INITIAL_INTERVAL = 10
PYPI_URL = "https://pypi.org/pypi/ggshield/json"

REPO_DIR = Path(__file__).parent.parent
FORMULA_PATH = REPO_DIR / "Formula" / "ggshield.rb"
WORK_DIR = REPO_DIR / "work"

GGSHIELD_REPO_URL = "https://github.com/GitGuardian/ggshield"

FORMULA_TEMPLATE = """class Ggshield < Formula
  include Language::Python::Virtualenv

  desc "Detect secrets in source code, scan your repos and docker images for leaks"
  homepage "https://github.com/GitGuardian/ggshield"
  url "{url}"
  sha256 "{sha256}"
  license "MIT"

  depends_on "python3"

  # The `cryptography` package needs these
  depends_on "pkg-config" => :build
  depends_on "rust" => :build

  {resources}

  def install
    virtualenv_create(libexec, "python3")
    virtualenv_install_with_resources
  end

  test do
    # In an environment with no API key, `ggshield api-status` exits with
    # status code 3 and tells the user to login
    assert_match "ggshield auth login", shell_output("#{{bin}}/ggshield api-status 2>&1", 3)
  end
end
"""


def build_sdist(commit_ref: str) -> Path:
    """Builds an sdist, returns the path to the sdist"""
    if WORK_DIR.exists():
        shutil.rmtree(WORK_DIR)
    WORK_DIR.mkdir()
    logging.info("Cloning repository at %s", commit_ref)
    run(["git", "clone", "--depth", "1", GGSHIELD_REPO_URL, "--branch", commit_ref, WORK_DIR], check=True)
    logging.info("Building sdist")
    run(["python", "setup.py", "sdist"], check=True, cwd=WORK_DIR)
    return next(WORK_DIR.glob("dist/*.tar.gz"))


def compute_sha256sum(path: Path) -> str:
    logging.info("Computing sha256sum")
    hash_ = hashlib.new("sha256")
    hash_.update(path.read_bytes())
    return hash_.hexdigest()


def install_dependencies(ggshield_pip_arg: str):
    logging.info("Installing dependencies, (%s)", ggshield_pip_arg)
    run(["pip", "install", "homebrew-pypi-poet", ggshield_pip_arg], check=True)


def check_availability(version: str) -> tuple[str, str]:
    """Find the package on pypi, returns a tuple of (url, sha256)"""
    retry = 1
    interval = RETRY_INITIAL_INTERVAL
    while True:
        logging.info(
            "Checking if ggshield %s is available on pypi (%d/%d)",
            version,
            retry,
            MAX_RETRIES,
        )
        response = request.urlopen(PYPI_URL)
        dct = json.load(response)
        releases = dct["releases"]
        if release := releases[version]:
            logging.info("ggshield %s is available", version)
            for artifact in release:
                if artifact["packagetype"] == "sdist":
                    return (artifact["url"], artifact["digests"]["sha256"])
            logging.error("no sdist found for version %s", version)
            sys.exit(3)

        if retry < MAX_RETRIES:
            logging.warning("Not available yet, waiting %d seconds", interval)
            time.sleep(interval)
            retry += 1
            interval *= 2
        else:
            logging.error("ggshield %s is not available on pypi", version)
            sys.exit(2)


def update_formula(url: str, sha256: str):
    logging.info("Updating %s", FORMULA_PATH)

    # Get resources
    proc = run(["poet", "--resources", "ggshield"], check=True, capture_output=True)
    resources = proc.stdout.decode("utf-8").strip()

    # poet adds ggshield itself as a resource: remove it
    resources, count = re.subn(
        r'  resource "ggshield" do.*?end\n\n',
        "",
        resources,
        flags=re.DOTALL,
    )
    assert count == 1

    # Fill the template and write the result
    content = FORMULA_TEMPLATE.format(url=url, sha256=sha256, resources=resources)
    FORMULA_PATH.write_text(content)


def commit_changes(version: str):
    logging.info("Committing changes")
    run(["git", "add", FORMULA_PATH], check=True)
    run(["git", "commit", "-m", f"chore: update ggshield to {version}"], check=True)


def main():
    logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s", datefmt='%H:%M:%S')

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter, description=__doc__
    )
    parser.add_argument("-c", "--commit", action="store_true", help="Commit changes")
    parser.add_argument(
        "--from-git",
        action="store_true",
        help=(
            "Instead of pulling from Pypi, checkout ggshield git repository,"
            " build an sdist from it and use it for the package"
        ),
    )
    parser.add_argument(
        "version_or_commit_ref",
        help="Version to package, or Git commit ref when called with --from-git",
    )
    args = parser.parse_args()

    if not FORMULA_PATH.exists():
        logging.error("%s does not exist", FORMULA_PATH)
        sys.exit(1)

    if args.from_git:
        archive_path = build_sdist(args.version_or_commit_ref)
        url = f"file://{archive_path}"
        sha256 = compute_sha256sum(archive_path)
        install_dependencies(str(archive_path))
    else:
        version = args.version_or_commit_ref
        url, sha256 = check_availability(version)
        install_dependencies(f"ggshield=={version}")

    update_formula(url, sha256)

    if not args.from_git and args.commit:
        commit_changes(args.from_pypi)

    return 0


if __name__ == "__main__":
    sys.exit(main())
# vi: ts=4 sw=4 et
